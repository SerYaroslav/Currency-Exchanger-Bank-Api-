{"version":3,"sources":["reducers/index.js","store.js","actions/index.js","components/currency-switcher/index.js","components/currency-switcher/currency-switcher.js","components/amount-input/index.js","components/amount-input/amount-input.js","components/date-switcher/index.js","components/date-switcher/date-switcher.js","components/service-context/index.js","components/hoc/index.js","components/hoc/with-bank-service.js","components/spinner/index.js","components/spinner/spinner.js","components/exhange-fields-item/index.js","components/exhange-fields-item/exhange-fields-item.js","components/exchange-fields/index.js","components/exchange-fields/exchange-fields.js","components/app/index.js","components/app/app.js","components/error-indicator/index.js","components/error-indicator/error-indicator.js","components/error-boundry/index.js","components/error-boundry/error-boundry.js","index.js","bank-service.js"],"names":["initialState","currencyCode","dates","amount","exchangeItems","loading","error","reducer","state","action","currentDates","currentExchItem","type","initExch","newExch","payload","idxExchItemTest","findIndex","item","settedDate","unmountData","unmountIdx","slice","switchedDate","idx","idxExchItem","store","createStore","applyMiddleware","thunk","rateDataLoaded","newRateData","rateDataError","unMountExchItem","itemData","testFetchRate","valcode","fromWhen","bankService","dispatch","getRate","then","res","catch","CurrencySwitcher","connect","onCurrencyChanged","className","map","cc","key","id","name","value","defaultChecked","onChange","changeEvent","target","htmlFor","AmountInput","onAmountChanged","input","placeholder","e","DateSwitcher","onDateSwitched","date","disabled","checked","includes","React","createContext","ServiceProvider","Provider","ServiceConsumer","Consumer","withBankService","Wrapped","props","Spinner","ExhangeFieldsItem","daspatch","bindActionCreators","fetchRate","useEffect","find","Sum","rate","toFixed","exchangeDate","ExchangeFields","App","ErrorIndicator","ErrorBoundry","hasError","this","setState","children","Component","_apiBase","now","Date","today","weekAgo","monthAgo","yearAgo","setDate","getDate","setYear","getFullYear","getDateCode","neddedDate","neddedYear","neddedMonth","getMonth","neddedDayDate","getResourse","url","a","fetch","ok","Error","status","json","dateCode","data","_transformRate","txt","exchangedate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fd9a3e0f.chunk.js","sourcesContent":["const initialState = {\r\n  currencyCode: \"USD\",\r\n  dates: [],\r\n  amount: \"\",\r\n  exchangeItems: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  const currentDates = state.dates;\r\n  const currentExchItem = state.exchangeItems;\r\n\r\n  switch (action.type) {\r\n    \r\n    case \"FETCH_RATE_DATA_REQUESTED\":\r\n      return{\r\n        ...state,\r\n        loading:true,\r\n        error:null,\r\n      }\r\n\r\n    case \"FETCH_RATE_DATA_SUCCESS\":\r\n      const initExch = state.exchangeItems;\r\n      const newExch = action.payload;\r\n      const idxExchItemTest = currentExchItem.findIndex(\r\n        item => item.settedDate === newExch.settedDate\r\n      ); \r\n\r\n       if (idxExchItemTest >= 0){\r\n        return {\r\n          ...state,\r\n          loading: false\r\n        };\r\n      }\r\n        return {\r\n          ...state,\r\n          exchangeItems: [...initExch, newExch],\r\n          loading: false,\r\n          error: null\r\n        };\r\n\r\n    case \"FETCH_RATE_DATA_FAILURE\":\r\n      return {\r\n        ...state,\r\n        exchangeItems:[],\r\n        loading:false,\r\n        error: action.payload,\r\n      };\r\n\r\n    case \"ON_CURRENCY_CHANGED\":\r\n      return {\r\n        ...state,\r\n        currencyCode: action.payload,\r\n        dates: [],\r\n        exchangeItems: [],\r\n      };\r\n\r\n    case \"ON_AMOUNT_CHANGED\":\r\n      return {\r\n        ...state,\r\n        amount: action.payload\r\n      };\r\n\r\n    case \"UNMOUNT_ITEM\":\r\n      const unmountData = action.payload;\r\n      const unmountIdx = currentExchItem.findIndex(\r\n        item => item.settedDate === unmountData\r\n      );\r\n      return {\r\n        ...state,\r\n        exchangeItems: [\r\n          ...currentExchItem.slice(0, unmountIdx),\r\n          ...currentExchItem.slice(unmountIdx + 1)\r\n        ]\r\n      };\r\n\r\n    case \"ON_DATE_SWITCHED\":\r\n      const switchedDate = action.payload;\r\n      const idx = currentDates.findIndex((item) => item === switchedDate);\r\n      const idxExchItem = currentExchItem.findIndex(\r\n        item => item.settedDate === switchedDate\r\n      ); \r\n\r\n      if (idx >= 0 ) {\r\n        return {\r\n          ...state,\r\n          dates: [\r\n            ...currentDates.slice(0, idx),\r\n            ...currentDates.slice(idx + 1)\r\n          ],\r\n           exchangeItems: [\r\n            ...currentExchItem.slice(0, idxExchItem),\r\n            ...currentExchItem.slice(idxExchItem + 1)\r\n          ]\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          loading: true,\r\n          dates: [...currentDates, switchedDate]\r\n        };\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport reducer from \"./reducers\";\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nexport default store;\r\n","\r\n\r\nconst rateDataRequested = () => {\r\n  return {\r\n    type: \"FETCH_RATE_DATA_REQUESTED\"\r\n  };\r\n};\r\n\r\nconst rateDataLoaded = newRateData => {\r\n  return {\r\n    type: \"FETCH_RATE_DATA_SUCCESS\",\r\n    payload: newRateData\r\n  };\r\n};\r\n\r\nconst rateDataError = error => {\r\n  return {\r\n    type: \"FETCH_RATE_DATA_FAILURE\",\r\n    payload: error\r\n  };\r\n};\r\n\r\n\r\nconst onCurrencyChanged = currencyCode => {\r\n  return {\r\n    type: \"ON_CURRENCY_CHANGED\",\r\n    payload: currencyCode\r\n  };\r\n};\r\n\r\nconst onAmountChanged = inpValue => {\r\n  return {\r\n    type: \"ON_AMOUNT_CHANGED\",\r\n    payload: inpValue,\r\n  }\r\n}\r\n\r\nconst onDateSwitched = dateName => {\r\n  return {\r\n    type: \"ON_DATE_SWITCHED\",\r\n    payload: dateName,\r\n  };\r\n}\r\n\r\nconst unMountExchItem = itemData => {\r\n  return {\r\n    type: \"UNMOUNT_ITEM\",\r\n    payload: itemData\r\n  };\r\n}\r\n\r\nconst fetchRateData = (bankService, dispatch) => (valcode, fromWhen) => {\r\n  dispatch(rateDataRequested())\r\n  bankService\r\n    .getRate(valcode, fromWhen)\r\n    .then(data => dispatch(rateDataLoaded(data)))\r\n    .catch(err => dispatch(rateDataError(err)));\r\n};\r\n\r\nconst testFetchRate = (valcode, fromWhen, bankService) => {\r\n  return dispatch => {\r\n    dispatch(rateDataRequested());\r\n    bankService.getRate(valcode, fromWhen) \r\n      .then(res => {\r\n        if (res.error) {\r\n          throw res.error;\r\n        }\r\n        dispatch(rateDataLoaded(res));\r\n        return res;\r\n      })\r\n      .catch(error => {\r\n        dispatch(rateDataError(error));\r\n      });\r\n  };\r\n}\r\n\r\nexport {\r\n  onCurrencyChanged,\r\n  onAmountChanged,\r\n  onDateSwitched,\r\n  fetchRateData,\r\n  rateDataRequested,\r\n  rateDataLoaded,\r\n  testFetchRate,\r\n  unMountExchItem\r\n};","import CurrencySwitcher from './currency-switcher';\r\n\r\nexport default CurrencySwitcher;","import React from 'react';\r\n\r\nimport {connect} from 'react-redux';\r\n\r\nimport {onCurrencyChanged} from \"../../actions\";\r\n\r\nimport './currency-switcher.scss';\r\n\r\nconst CurrencySwitcher =({ onCurrencyChanged, currencyCode }) => {\r\n    \r\n  const currencyes = [\"USD\", \"EUR\", \"GBP\", \"PLN\"];\r\n  \r\n  return(\r\n    <div className=\"radio-wrapper\">\r\n      {\r\n        currencyes.map((cc)=>{\r\n          return (\r\n            <div key={cc} className=\"radio-container\">\r\n              <input\r\n                type=\"radio\"\r\n                id={cc}\r\n                name=\"currency\"\r\n                value={cc}\r\n                defaultChecked={currencyCode === cc}\r\n                onChange={changeEvent =>\r\n                  onCurrencyChanged(changeEvent.target.value)\r\n                }\r\n                className=\"form-radio\"\r\n              />\r\n              <label htmlFor={cc} className=\"form-radio-label\">\r\n                {cc}\r\n              </label>\r\n            </div>\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ currencyCode }) =>{\r\n  return {currencyCode}\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onCurrencyChanged: currencyCode => dispatch(onCurrencyChanged(currencyCode))\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrencySwitcher);","import AmountInput from './amount-input';\r\n\r\nexport default AmountInput;","import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport {onAmountChanged} from '../../actions';\r\n\r\nimport './amount-input.scss';\r\n\r\nconst AmountImput = ({ amount, onAmountChanged }) => {\r\n  return (\r\n    <div className=\"amount-wrapper\">\r\n      <label htmlFor=\"amount\" className=\"amount-label\">\r\n        Enter the amount in HRN:\r\n      </label>\r\n      <input\r\n        type=\"number\"\r\n        value={amount}\r\n        className=\"amount-input\"\r\n        id=\"amount\"\r\n        placeholder=\"...\"\r\n        onChange={e => {\r\n          onAmountChanged(e.target.value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ amount }) => {\r\n  return {amount};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAmountChanged: input => dispatch(onAmountChanged(input))\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AmountImput);","import DateSwitcher from './date-switcher';\r\n\r\nexport default DateSwitcher;","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\n\r\nimport {onDateSwitched} from \"../../actions\";\r\n\r\nimport \"./date-switcher.scss\";\r\n\r\nconst DateSwitcher = ({ dates, onDateSwitched, loading }) => {\r\n   const itemDate = [\"Today\", \"7 days ago\", \"30 days ago\", \"1 year ago\"];\r\n\r\n  return (\r\n    <div className=\"check-wrapper\">\r\n      {itemDate.map(date => {\r\n        return (\r\n          <div key={date} className=\"check-container\">\r\n            <input\r\n              disabled={loading}\r\n              type=\"checkbox\"\r\n              id={date}\r\n              name={date}\r\n              value={date}\r\n              checked={dates.includes(date)}\r\n              onChange={changeEvent => {\r\n                onDateSwitched(changeEvent.target.value);\r\n              }}\r\n              className=\"form-check\"\r\n            />\r\n            <label htmlFor={date} className=\"form-check-label\">\r\n              {date}\r\n            </label>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n   );\r\n };\r\n\r\nconst mapStateToProps = ({ dates,loading }) => {\r\n  return { dates, loading };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onDateSwitched: switchedDate => dispatch(onDateSwitched(switchedDate))\r\n  };\r\n}; \r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DateSwitcher); \r\n","import React from \"react\";\r\n\r\nconst {\r\n  Provider: ServiceProvider,\r\n  Consumer: ServiceConsumer\r\n} = React.createContext();\r\n\r\nexport { ServiceProvider, ServiceConsumer };\r\n","import withBankService from './with-bank-service';\r\n\r\nexport default withBankService;","import React from \"react\";\r\nimport { ServiceConsumer } from \"../service-context\";\r\n\r\nconst withBankService = () => Wrapped => {\r\n  return props => {\r\n    return (\r\n      <ServiceConsumer>\r\n        {\r\n        bankService => {\r\n          return <Wrapped {...props} bankService={bankService} />;\r\n        }\r\n        }\r\n      </ServiceConsumer>\r\n    );\r\n  };\r\n};\r\n\r\nexport default withBankService;\r\n","import Spinner from './spinner';\r\nexport default Spinner;","import React from 'react';\r\n\r\nconst Spinner = () => {\r\n  return(\r\n    <span>loading...</span>\r\n  )\r\n};\r\n\r\nexport default Spinner;","import ExhangeFieldsItem from './exhange-fields-item';\r\n\r\nexport default ExhangeFieldsItem;","import React, { useEffect } from \"react\";\r\n\r\nimport withBankService from \"../hoc\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Spinner from \"../spinner\";\r\n\r\nimport { testFetchRate, unMountExchItem } from \"../../actions\";\r\n\r\nimport \"./exhange-fields-item.scss\";\r\n\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nconst ExhangeFieldsItem = ({\r\n  currencyCode,\r\n  amount,\r\n  exchangeItems,\r\n  loading,\r\n  fetchRate,\r\n  bankService,\r\n  idx,\r\n  date,\r\n  dates\r\n}) => {\r\n  useEffect(() => {\r\n    fetchRate(currencyCode, date, bankService)\r\n    return function cleanup() {\r\n      return unMountExchItem(date);\r\n    };\r\n  }, [currencyCode, date, bankService, fetchRate]);\r\n\r\n  if (loading) {\r\n    return (\r\n    <div className=\"date-container\">\r\n      <Spinner />\r\n    </div>\r\n    )\r\n  }\r\n\r\n  const item = exchangeItems.find(item => item.settedDate === date);\r\n  let Sum = (item.rate * amount).toFixed(2);\r\n\r\n  \r\n    return (\r\n      <div className=\"date-container\">\r\n        <div>{`Currency: ${item.currencyCode}`}</div>\r\n        <div>{`Rate: ${item.rate.toFixed(3)}`}</div>\r\n        <div>{`Date: ${item.exchangeDate}`}</div>\r\n        <div className=\"sum\">{` HRN: ${Sum}`}</div>\r\n      </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({\r\n  currencyCode,\r\n  amount,\r\n  exchangeItems,\r\n  loading,\r\n  dates\r\n}) => {\r\n  return { currencyCode, amount, exchangeItems, loading, dates };\r\n};\r\n\r\nconst mapDispatchToProps = daspatch =>\r\n  bindActionCreators(\r\n    {\r\n      fetchRate: testFetchRate,\r\n      unMountExchItem\r\n    },\r\n    daspatch\r\n  );\r\n\r\nexport default withBankService()(\r\n  connect(mapStateToProps, mapDispatchToProps)(ExhangeFieldsItem)\r\n);","import ExchangeFields from './exchange-fields';\r\n\r\nexport default ExchangeFields;","import React from \"react\";\r\n\r\nimport withBankService  from \"../hoc\";\r\n\r\nimport './exchange-fields.scss'\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport ExhangeFieldsItem from \"../exhange-fields-item\";\r\n\r\nconst ExchangeFields = ({ dates, exchangeItems }) => {\r\n\r\n  \r\n    return (\r\n      <div className=\"fields-wrapper\">\r\n        {\r\n        dates.map((date, idx) => {\r\n          return <ExhangeFieldsItem date={date} idx={idx} key={idx} />;\r\n        })}\r\n      </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ dates, exchangeItems }) => {\r\n  return { dates, exchangeItems };\r\n};\r\n\r\nexport default withBankService()(\r\n  connect(mapStateToProps, null)(ExchangeFields)\r\n);","import App from './app';\r\n\r\nexport default App;","import React from 'react';\r\n\r\nimport './app.scss';\r\n\r\nimport CurrencySwitcher from '../currency-switcher';\r\nimport AmountInput from '../amount-input';\r\nimport DateSwitcher from \"../date-switcher\";\r\nimport ExchangeFields from '../exchange-fields';\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"header-row\">\r\n        <CurrencySwitcher />\r\n        <AmountInput />\r\n      </div>\r\n      <div className=\"body-row\">\r\n        <DateSwitcher />\r\n        <ExchangeFields />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","import ErrorIndicator from './error-indicator';\r\n\r\nexport default ErrorIndicator;","import React from 'react';\r\n\r\nconst ErrorIndicator = () => {\r\n  return <div>Error...</div>\r\n};\r\n\r\nexport default ErrorIndicator;","import ErrorBoundry from './error-boundry';\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\nimport ErrorIndicator from '../error-indicator';\r\n\r\nexport default class ErrorBoundry extends Component {\r\n\r\n  state = {\r\n    hasError: false,\r\n  }\r\n  \r\n  componentDidCatch(){\r\n    this.setState({\r\n      hasError: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    \r\n    if(this.state.hasError){\r\n      return <ErrorIndicator />;\r\n    }\r\n\r\n    return this.props.children;\r\n  };\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from \"./store\";\n\nimport App from './components/app';\nimport ErrorBoundry from \"./components/error-boundry\";\nimport { ServiceProvider } from './components/service-context';\nimport BankService from './bank-service';\n\nconst bankService = new BankService()\n\nReactDOM.render(\n  <Provider store={store}>\n    <ErrorBoundry>\n      <ServiceProvider value={bankService}>\n        <App />\n      </ServiceProvider>\n    </ErrorBoundry>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","export default class BankService {\r\n\r\n  _apiBase = 'https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?';\r\n\r\n  now = new Date();\r\n  today = 'Today';\r\n  weekAgo = '7 days ago';\r\n  monthAgo = '30 days ago';\r\n  yearAgo = '1 year ago';\r\n\r\n  setDate = (date,fromWhen) => {\r\n  let res = new Date()\r\n  switch (fromWhen) {\r\n    case 'today':\r\n      return res = date;\r\n    \r\n    case '7 days ago':\r\n      return (res.setDate(date.getDate()-7));\r\n\r\n    case '30 days ago':\r\n      return (res.setDate(date.getDate()-30));\r\n\r\n    case '1 year ago':\r\n      return (res.setYear(date.getFullYear()-1));\r\n  \r\n    default:\r\n      return date\r\n  } \r\n  }\r\n  \r\n  getDateCode = (date,fromWhen) => {\r\n  const neddedDate = this.setDate(date, fromWhen)\r\n\r\n  const neddedYear = new Date(neddedDate).getFullYear();\r\n\r\n  let neddedMonth = new Date(neddedDate).getMonth();\r\n    neddedMonth++\r\n    if(neddedMonth < 10) neddedMonth = \"0\" + neddedMonth;\r\n\r\n  let neddedDayDate = new Date(neddedDate).getDate();\r\n    if (neddedDayDate < 10) neddedDayDate = \"0\" + neddedDayDate;\r\n\r\n  const finalDate = `${neddedYear}${neddedMonth}${neddedDayDate}`; \r\n\r\n  return finalDate;\r\n  };\r\n\r\n  getResourse = async (url) => {\r\n    const res = await fetch(`${this._apiBase}${url}&json`);\r\n\r\n    if(!res.ok) {\r\n      throw new Error(`Could not fetch ${url}, receive ${res.status}` )\r\n    }\r\n\r\n    return await res.json();\r\n  };\r\n\r\n  getRate = async (valcode, fromWhen, date = this.now) => {\r\n    const dateCode = this.getDateCode(date, fromWhen);\r\n    const data = await this.getResourse(`valcode=${valcode}&date=${dateCode}`);\r\n    const res = this._transformRate(data, fromWhen);\r\n    return (res);\r\n  };\r\n\r\n  _transformRate = (rate, fromWhen) => {\r\n    return {\r\n      name: rate[0].txt,\r\n      rate: rate[0].rate,\r\n      currencyCode: rate[0].cc,\r\n      exchangeDate: rate[0].exchangedate,\r\n      settedDate: fromWhen,\r\n    };\r\n  }\r\n\r\n};\r\n"],"sourceRoot":""}